/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GradePassbackService } from "../gradePassback.service";
import { GradePassbackCreateInput } from "./GradePassbackCreateInput";
import { GradePassback } from "./GradePassback";
import { GradePassbackFindManyArgs } from "./GradePassbackFindManyArgs";
import { GradePassbackWhereUniqueInput } from "./GradePassbackWhereUniqueInput";
import { GradePassbackUpdateInput } from "./GradePassbackUpdateInput";
import { GradePassbackDto } from "../GradePassbackDto";

export class GradePassbackControllerBase {
  constructor(protected readonly service: GradePassbackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GradePassback })
  async createGradePassback(
    @common.Body() data: GradePassbackCreateInput
  ): Promise<GradePassback> {
    return await this.service.createGradePassback({
      data: data,
      select: {
        comment: true,
        createdAt: true,
        id: true,
        score: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GradePassback] })
  @ApiNestedQuery(GradePassbackFindManyArgs)
  async gradePassbacks(
    @common.Req() request: Request
  ): Promise<GradePassback[]> {
    const args = plainToClass(GradePassbackFindManyArgs, request.query);
    return this.service.gradePassbacks({
      ...args,
      select: {
        comment: true,
        createdAt: true,
        id: true,
        score: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GradePassback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gradePassback(
    @common.Param() params: GradePassbackWhereUniqueInput
  ): Promise<GradePassback | null> {
    const result = await this.service.gradePassback({
      where: params,
      select: {
        comment: true,
        createdAt: true,
        id: true,
        score: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GradePassback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGradePassback(
    @common.Param() params: GradePassbackWhereUniqueInput,
    @common.Body() data: GradePassbackUpdateInput
  ): Promise<GradePassback | null> {
    try {
      return await this.service.updateGradePassback({
        where: params,
        data: data,
        select: {
          comment: true,
          createdAt: true,
          id: true,
          score: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GradePassback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGradePassback(
    @common.Param() params: GradePassbackWhereUniqueInput
  ): Promise<GradePassback | null> {
    try {
      return await this.service.deleteGradePassback({
        where: params,
        select: {
          comment: true,
          createdAt: true,
          id: true,
          score: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/LTI/grade-passback")
  @swagger.ApiOkResponse({
    type: GradePassbackDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GradePassback(
    @common.Body()
    body: GradePassbackDto
  ): Promise<GradePassbackDto> {
    return this.service.GradePassback(body);
  }
}
