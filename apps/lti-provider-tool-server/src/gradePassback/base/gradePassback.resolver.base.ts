/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GradePassback } from "./GradePassback";
import { GradePassbackCountArgs } from "./GradePassbackCountArgs";
import { GradePassbackFindManyArgs } from "./GradePassbackFindManyArgs";
import { GradePassbackFindUniqueArgs } from "./GradePassbackFindUniqueArgs";
import { CreateGradePassbackArgs } from "./CreateGradePassbackArgs";
import { UpdateGradePassbackArgs } from "./UpdateGradePassbackArgs";
import { DeleteGradePassbackArgs } from "./DeleteGradePassbackArgs";
import { GradePassbackDto } from "../GradePassbackDto";
import { GradePassbackService } from "../gradePassback.service";
@graphql.Resolver(() => GradePassback)
export class GradePassbackResolverBase {
  constructor(protected readonly service: GradePassbackService) {}

  async _gradePassbacksMeta(
    @graphql.Args() args: GradePassbackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GradePassback])
  async gradePassbacks(
    @graphql.Args() args: GradePassbackFindManyArgs
  ): Promise<GradePassback[]> {
    return this.service.gradePassbacks(args);
  }

  @graphql.Query(() => GradePassback, { nullable: true })
  async gradePassback(
    @graphql.Args() args: GradePassbackFindUniqueArgs
  ): Promise<GradePassback | null> {
    const result = await this.service.gradePassback(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GradePassback)
  async createGradePassback(
    @graphql.Args() args: CreateGradePassbackArgs
  ): Promise<GradePassback> {
    return await this.service.createGradePassback({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GradePassback)
  async updateGradePassback(
    @graphql.Args() args: UpdateGradePassbackArgs
  ): Promise<GradePassback | null> {
    try {
      return await this.service.updateGradePassback({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GradePassback)
  async deleteGradePassback(
    @graphql.Args() args: DeleteGradePassbackArgs
  ): Promise<GradePassback | null> {
    try {
      return await this.service.deleteGradePassback(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GradePassbackDto)
  async GradePassback(
    @graphql.Args()
    args: GradePassbackDto
  ): Promise<GradePassbackDto> {
    return this.service.GradePassback(args);
  }
}
