/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LaunchRequestService } from "../launchRequest.service";
import { LaunchRequestCreateInput } from "./LaunchRequestCreateInput";
import { LaunchRequest } from "./LaunchRequest";
import { LaunchRequestFindManyArgs } from "./LaunchRequestFindManyArgs";
import { LaunchRequestWhereUniqueInput } from "./LaunchRequestWhereUniqueInput";
import { LaunchRequestUpdateInput } from "./LaunchRequestUpdateInput";
import { LaunchRequestDto } from "../LaunchRequestDto";

export class LaunchRequestControllerBase {
  constructor(protected readonly service: LaunchRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LaunchRequest })
  async createLaunchRequest(
    @common.Body() data: LaunchRequestCreateInput
  ): Promise<LaunchRequest> {
    return await this.service.createLaunchRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        resourceLinkId: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LaunchRequest] })
  @ApiNestedQuery(LaunchRequestFindManyArgs)
  async launchRequests(
    @common.Req() request: Request
  ): Promise<LaunchRequest[]> {
    const args = plainToClass(LaunchRequestFindManyArgs, request.query);
    return this.service.launchRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        resourceLinkId: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LaunchRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async launchRequest(
    @common.Param() params: LaunchRequestWhereUniqueInput
  ): Promise<LaunchRequest | null> {
    const result = await this.service.launchRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        resourceLinkId: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LaunchRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLaunchRequest(
    @common.Param() params: LaunchRequestWhereUniqueInput,
    @common.Body() data: LaunchRequestUpdateInput
  ): Promise<LaunchRequest | null> {
    try {
      return await this.service.updateLaunchRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          resourceLinkId: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LaunchRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLaunchRequest(
    @common.Param() params: LaunchRequestWhereUniqueInput
  ): Promise<LaunchRequest | null> {
    try {
      return await this.service.deleteLaunchRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          resourceLinkId: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/LTI/launch")
  @swagger.ApiOkResponse({
    type: LaunchRequestDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async LtiLaunch(
    @common.Body()
    body: LaunchRequestDto
  ): Promise<LaunchRequestDto> {
    return this.service.LtiLaunch(body);
  }
}
