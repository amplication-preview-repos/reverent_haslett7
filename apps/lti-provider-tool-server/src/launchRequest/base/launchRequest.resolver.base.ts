/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LaunchRequest } from "./LaunchRequest";
import { LaunchRequestCountArgs } from "./LaunchRequestCountArgs";
import { LaunchRequestFindManyArgs } from "./LaunchRequestFindManyArgs";
import { LaunchRequestFindUniqueArgs } from "./LaunchRequestFindUniqueArgs";
import { CreateLaunchRequestArgs } from "./CreateLaunchRequestArgs";
import { UpdateLaunchRequestArgs } from "./UpdateLaunchRequestArgs";
import { DeleteLaunchRequestArgs } from "./DeleteLaunchRequestArgs";
import { LaunchRequestDto } from "../LaunchRequestDto";
import { LaunchRequestService } from "../launchRequest.service";
@graphql.Resolver(() => LaunchRequest)
export class LaunchRequestResolverBase {
  constructor(protected readonly service: LaunchRequestService) {}

  async _launchRequestsMeta(
    @graphql.Args() args: LaunchRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LaunchRequest])
  async launchRequests(
    @graphql.Args() args: LaunchRequestFindManyArgs
  ): Promise<LaunchRequest[]> {
    return this.service.launchRequests(args);
  }

  @graphql.Query(() => LaunchRequest, { nullable: true })
  async launchRequest(
    @graphql.Args() args: LaunchRequestFindUniqueArgs
  ): Promise<LaunchRequest | null> {
    const result = await this.service.launchRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LaunchRequest)
  async createLaunchRequest(
    @graphql.Args() args: CreateLaunchRequestArgs
  ): Promise<LaunchRequest> {
    return await this.service.createLaunchRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LaunchRequest)
  async updateLaunchRequest(
    @graphql.Args() args: UpdateLaunchRequestArgs
  ): Promise<LaunchRequest | null> {
    try {
      return await this.service.updateLaunchRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LaunchRequest)
  async deleteLaunchRequest(
    @graphql.Args() args: DeleteLaunchRequestArgs
  ): Promise<LaunchRequest | null> {
    try {
      return await this.service.deleteLaunchRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LaunchRequestDto)
  async LtiLaunch(
    @graphql.Args()
    args: LaunchRequestDto
  ): Promise<LaunchRequestDto> {
    return this.service.LtiLaunch(args);
  }
}
