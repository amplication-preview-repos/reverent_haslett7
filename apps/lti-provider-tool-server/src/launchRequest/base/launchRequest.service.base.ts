/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LaunchRequest as PrismaLaunchRequest } from "@prisma/client";
import { LaunchRequestDto } from "../LaunchRequestDto";

export class LaunchRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LaunchRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.launchRequest.count(args);
  }

  async launchRequests(
    args: Prisma.LaunchRequestFindManyArgs
  ): Promise<PrismaLaunchRequest[]> {
    return this.prisma.launchRequest.findMany(args);
  }
  async launchRequest(
    args: Prisma.LaunchRequestFindUniqueArgs
  ): Promise<PrismaLaunchRequest | null> {
    return this.prisma.launchRequest.findUnique(args);
  }
  async createLaunchRequest(
    args: Prisma.LaunchRequestCreateArgs
  ): Promise<PrismaLaunchRequest> {
    return this.prisma.launchRequest.create(args);
  }
  async updateLaunchRequest(
    args: Prisma.LaunchRequestUpdateArgs
  ): Promise<PrismaLaunchRequest> {
    return this.prisma.launchRequest.update(args);
  }
  async deleteLaunchRequest(
    args: Prisma.LaunchRequestDeleteArgs
  ): Promise<PrismaLaunchRequest> {
    return this.prisma.launchRequest.delete(args);
  }
  async LtiLaunch(args: LaunchRequestDto): Promise<LaunchRequestDto> {
    throw new Error("Not implemented");
  }
}
