/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeepLinkingService } from "../deepLinking.service";
import { DeepLinkingCreateInput } from "./DeepLinkingCreateInput";
import { DeepLinking } from "./DeepLinking";
import { DeepLinkingFindManyArgs } from "./DeepLinkingFindManyArgs";
import { DeepLinkingWhereUniqueInput } from "./DeepLinkingWhereUniqueInput";
import { DeepLinkingUpdateInput } from "./DeepLinkingUpdateInput";
import { DeepLinkingDto } from "../DeepLinkingDto";

export class DeepLinkingControllerBase {
  constructor(protected readonly service: DeepLinkingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeepLinking })
  async createDeepLinking(
    @common.Body() data: DeepLinkingCreateInput
  ): Promise<DeepLinking> {
    return await this.service.createDeepLinking({
      data: data,
      select: {
        contentItems: true,
        createdAt: true,
        data: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeepLinking] })
  @ApiNestedQuery(DeepLinkingFindManyArgs)
  async deepLinkings(@common.Req() request: Request): Promise<DeepLinking[]> {
    const args = plainToClass(DeepLinkingFindManyArgs, request.query);
    return this.service.deepLinkings({
      ...args,
      select: {
        contentItems: true,
        createdAt: true,
        data: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeepLinking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deepLinking(
    @common.Param() params: DeepLinkingWhereUniqueInput
  ): Promise<DeepLinking | null> {
    const result = await this.service.deepLinking({
      where: params,
      select: {
        contentItems: true,
        createdAt: true,
        data: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeepLinking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeepLinking(
    @common.Param() params: DeepLinkingWhereUniqueInput,
    @common.Body() data: DeepLinkingUpdateInput
  ): Promise<DeepLinking | null> {
    try {
      return await this.service.updateDeepLinking({
        where: params,
        data: data,
        select: {
          contentItems: true,
          createdAt: true,
          data: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeepLinking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeepLinking(
    @common.Param() params: DeepLinkingWhereUniqueInput
  ): Promise<DeepLinking | null> {
    try {
      return await this.service.deleteDeepLinking({
        where: params,
        select: {
          contentItems: true,
          createdAt: true,
          data: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/LTI/deep-linking")
  @swagger.ApiOkResponse({
    type: DeepLinkingDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeepLinking(
    @common.Body()
    body: DeepLinkingDto
  ): Promise<DeepLinkingDto> {
    return this.service.DeepLinking(body);
  }
}
