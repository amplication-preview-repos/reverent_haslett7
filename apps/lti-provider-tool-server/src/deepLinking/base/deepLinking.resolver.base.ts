/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeepLinking } from "./DeepLinking";
import { DeepLinkingCountArgs } from "./DeepLinkingCountArgs";
import { DeepLinkingFindManyArgs } from "./DeepLinkingFindManyArgs";
import { DeepLinkingFindUniqueArgs } from "./DeepLinkingFindUniqueArgs";
import { CreateDeepLinkingArgs } from "./CreateDeepLinkingArgs";
import { UpdateDeepLinkingArgs } from "./UpdateDeepLinkingArgs";
import { DeleteDeepLinkingArgs } from "./DeleteDeepLinkingArgs";
import { DeepLinkingDto } from "../DeepLinkingDto";
import { DeepLinkingService } from "../deepLinking.service";
@graphql.Resolver(() => DeepLinking)
export class DeepLinkingResolverBase {
  constructor(protected readonly service: DeepLinkingService) {}

  async _deepLinkingsMeta(
    @graphql.Args() args: DeepLinkingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeepLinking])
  async deepLinkings(
    @graphql.Args() args: DeepLinkingFindManyArgs
  ): Promise<DeepLinking[]> {
    return this.service.deepLinkings(args);
  }

  @graphql.Query(() => DeepLinking, { nullable: true })
  async deepLinking(
    @graphql.Args() args: DeepLinkingFindUniqueArgs
  ): Promise<DeepLinking | null> {
    const result = await this.service.deepLinking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeepLinking)
  async createDeepLinking(
    @graphql.Args() args: CreateDeepLinkingArgs
  ): Promise<DeepLinking> {
    return await this.service.createDeepLinking({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeepLinking)
  async updateDeepLinking(
    @graphql.Args() args: UpdateDeepLinkingArgs
  ): Promise<DeepLinking | null> {
    try {
      return await this.service.updateDeepLinking({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeepLinking)
  async deleteDeepLinking(
    @graphql.Args() args: DeleteDeepLinkingArgs
  ): Promise<DeepLinking | null> {
    try {
      return await this.service.deleteDeepLinking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeepLinkingDto)
  async DeepLinking(
    @graphql.Args()
    args: DeepLinkingDto
  ): Promise<DeepLinkingDto> {
    return this.service.DeepLinking(args);
  }
}
