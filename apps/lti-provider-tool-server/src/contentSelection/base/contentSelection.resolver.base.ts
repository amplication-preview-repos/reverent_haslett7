/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContentSelection } from "./ContentSelection";
import { ContentSelectionCountArgs } from "./ContentSelectionCountArgs";
import { ContentSelectionFindManyArgs } from "./ContentSelectionFindManyArgs";
import { ContentSelectionFindUniqueArgs } from "./ContentSelectionFindUniqueArgs";
import { CreateContentSelectionArgs } from "./CreateContentSelectionArgs";
import { UpdateContentSelectionArgs } from "./UpdateContentSelectionArgs";
import { DeleteContentSelectionArgs } from "./DeleteContentSelectionArgs";
import { ContentSelectionDto } from "../ContentSelectionDto";
import { ContentSelectionService } from "../contentSelection.service";
@graphql.Resolver(() => ContentSelection)
export class ContentSelectionResolverBase {
  constructor(protected readonly service: ContentSelectionService) {}

  async _contentSelectionsMeta(
    @graphql.Args() args: ContentSelectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContentSelection])
  async contentSelections(
    @graphql.Args() args: ContentSelectionFindManyArgs
  ): Promise<ContentSelection[]> {
    return this.service.contentSelections(args);
  }

  @graphql.Query(() => ContentSelection, { nullable: true })
  async contentSelection(
    @graphql.Args() args: ContentSelectionFindUniqueArgs
  ): Promise<ContentSelection | null> {
    const result = await this.service.contentSelection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContentSelection)
  async createContentSelection(
    @graphql.Args() args: CreateContentSelectionArgs
  ): Promise<ContentSelection> {
    return await this.service.createContentSelection({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContentSelection)
  async updateContentSelection(
    @graphql.Args() args: UpdateContentSelectionArgs
  ): Promise<ContentSelection | null> {
    try {
      return await this.service.updateContentSelection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentSelection)
  async deleteContentSelection(
    @graphql.Args() args: DeleteContentSelectionArgs
  ): Promise<ContentSelection | null> {
    try {
      return await this.service.deleteContentSelection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentSelectionDto)
  async ContentSelection(
    @graphql.Args()
    args: ContentSelectionDto
  ): Promise<ContentSelectionDto> {
    return this.service.ContentSelection(args);
  }
}
