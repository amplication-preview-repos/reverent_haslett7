/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContentSelectionService } from "../contentSelection.service";
import { ContentSelectionCreateInput } from "./ContentSelectionCreateInput";
import { ContentSelection } from "./ContentSelection";
import { ContentSelectionFindManyArgs } from "./ContentSelectionFindManyArgs";
import { ContentSelectionWhereUniqueInput } from "./ContentSelectionWhereUniqueInput";
import { ContentSelectionUpdateInput } from "./ContentSelectionUpdateInput";
import { ContentSelectionDto } from "../ContentSelectionDto";

export class ContentSelectionControllerBase {
  constructor(protected readonly service: ContentSelectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentSelection })
  async createContentSelection(
    @common.Body() data: ContentSelectionCreateInput
  ): Promise<ContentSelection> {
    return await this.service.createContentSelection({
      data: data,
      select: {
        createdAt: true,
        id: true,
        items: true,
        selectionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentSelection] })
  @ApiNestedQuery(ContentSelectionFindManyArgs)
  async contentSelections(
    @common.Req() request: Request
  ): Promise<ContentSelection[]> {
    const args = plainToClass(ContentSelectionFindManyArgs, request.query);
    return this.service.contentSelections({
      ...args,
      select: {
        createdAt: true,
        id: true,
        items: true,
        selectionId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentSelection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contentSelection(
    @common.Param() params: ContentSelectionWhereUniqueInput
  ): Promise<ContentSelection | null> {
    const result = await this.service.contentSelection({
      where: params,
      select: {
        createdAt: true,
        id: true,
        items: true,
        selectionId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentSelection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContentSelection(
    @common.Param() params: ContentSelectionWhereUniqueInput,
    @common.Body() data: ContentSelectionUpdateInput
  ): Promise<ContentSelection | null> {
    try {
      return await this.service.updateContentSelection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          items: true,
          selectionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentSelection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContentSelection(
    @common.Param() params: ContentSelectionWhereUniqueInput
  ): Promise<ContentSelection | null> {
    try {
      return await this.service.deleteContentSelection({
        where: params,
        select: {
          createdAt: true,
          id: true,
          items: true,
          selectionId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/LTI/content-selection")
  @swagger.ApiOkResponse({
    type: ContentSelectionDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ContentSelection(
    @common.Body()
    body: ContentSelectionDto
  ): Promise<ContentSelectionDto> {
    return this.service.ContentSelection(body);
  }
}
