/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ContentSelection as PrismaContentSelection,
} from "@prisma/client";
import { ContentSelectionDto } from "../ContentSelectionDto";
import { ContentSelection } from "./ContentSelection";

export class ContentSelectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContentSelectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contentSelection.count(args);
  }

  async contentSelections(
    args: Prisma.ContentSelectionFindManyArgs
  ): Promise<PrismaContentSelection[]> {
    return this.prisma.contentSelection.findMany(args);
  }
  async contentSelection(
    args: Prisma.ContentSelectionFindUniqueArgs
  ): Promise<PrismaContentSelection | null> {
    return this.prisma.contentSelection.findUnique(args);
  }
  async createContentSelection(
    args: Prisma.ContentSelectionCreateArgs
  ): Promise<PrismaContentSelection> {
    return this.prisma.contentSelection.create(args);
  }
  async updateContentSelection(
    args: Prisma.ContentSelectionUpdateArgs
  ): Promise<PrismaContentSelection> {
    return this.prisma.contentSelection.update(args);
  }
  async deleteContentSelection(
    args: Prisma.ContentSelectionDeleteArgs
  ): Promise<PrismaContentSelection> {
    return this.prisma.contentSelection.delete(args);
  }
  async ContentSelection(
    args: ContentSelectionDto
  ): Promise<ContentSelectionDto> {
    throw new Error("Not implemented");
  }
}
